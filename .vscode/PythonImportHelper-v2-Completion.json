[
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "response = requests.get(\"https://news.ycombinator.com\")\nyc_web_page = response.text\nsoup = BeautifulSoup(yc_web_page, \"html.parser\")\narticle= soup.find_all(name=\"span\", class_ = \"titleline\")\narticle_texts = []\narticle_links = []\nfor a in article:\n    article_tag = a.find(name=\"a\")\n    article_text = article_tag.getText()\n    article_texts.append(article_text)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "yc_web_page",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "yc_web_page = response.text\nsoup = BeautifulSoup(yc_web_page, \"html.parser\")\narticle= soup.find_all(name=\"span\", class_ = \"titleline\")\narticle_texts = []\narticle_links = []\nfor a in article:\n    article_tag = a.find(name=\"a\")\n    article_text = article_tag.getText()\n    article_texts.append(article_text)\n    article_link = article_tag.get(\"href\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "soup",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "soup = BeautifulSoup(yc_web_page, \"html.parser\")\narticle= soup.find_all(name=\"span\", class_ = \"titleline\")\narticle_texts = []\narticle_links = []\nfor a in article:\n    article_tag = a.find(name=\"a\")\n    article_text = article_tag.getText()\n    article_texts.append(article_text)\n    article_link = article_tag.get(\"href\")\n    article_links.append(article_link)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "article_texts",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "article_texts = []\narticle_links = []\nfor a in article:\n    article_tag = a.find(name=\"a\")\n    article_text = article_tag.getText()\n    article_texts.append(article_text)\n    article_link = article_tag.get(\"href\")\n    article_links.append(article_link)\narticle_upvotes = [int(score.getText().split()[0]) for score in soup.find_all(name=\"span\", class_=\"score\")]\nlargest_number = max(article_upvotes)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "article_links",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "article_links = []\nfor a in article:\n    article_tag = a.find(name=\"a\")\n    article_text = article_tag.getText()\n    article_texts.append(article_text)\n    article_link = article_tag.get(\"href\")\n    article_links.append(article_link)\narticle_upvotes = [int(score.getText().split()[0]) for score in soup.find_all(name=\"span\", class_=\"score\")]\nlargest_number = max(article_upvotes)\nlargest_number_index = article_upvotes.index(largest_number)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "article_upvotes",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "article_upvotes = [int(score.getText().split()[0]) for score in soup.find_all(name=\"span\", class_=\"score\")]\nlargest_number = max(article_upvotes)\nlargest_number_index = article_upvotes.index(largest_number)\nprint(article_texts[largest_number_index])\nprint(article_links[largest_number_index])\nprint(article_upvotes[largest_number_index])",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "largest_number",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "largest_number = max(article_upvotes)\nlargest_number_index = article_upvotes.index(largest_number)\nprint(article_texts[largest_number_index])\nprint(article_links[largest_number_index])\nprint(article_upvotes[largest_number_index])",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "largest_number_index",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "largest_number_index = article_upvotes.index(largest_number)\nprint(article_texts[largest_number_index])\nprint(article_links[largest_number_index])\nprint(article_upvotes[largest_number_index])",
        "detail": "main",
        "documentation": {}
    }
]